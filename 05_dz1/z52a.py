"""
Задание 5.2a
Всё, как в задании 5.2, но, если пользователь ввел адрес хоста, а не адрес сети,
надо преобразовать адрес хоста в адрес сети и вывести адрес сети и маску,
как в задании 5.2.
Пример адреса сети (все биты хостовой части равны нулю):
* 10.0.1.0/24
* 190.1.0.0/16
Пример адреса хоста:
* 10.0.1.1/24 - хост из сети 10.0.1.0/24
* 10.0.5.195/28 - хост из сети 10.0.5.192/28
Если пользователь ввел адрес 10.0.1.1/24, вывод должен быть таким:
Network:
10        0         1         0
00001010  00000000  00000001  00000000
Mask:
/24
255       255       255       0
11111111  11111111  11111111  00000000
Проверить работу скрипта на разных комбинациях хост/маска, например:
    10.0.5.195/28, 10.0.1.1/24
Вывод сети и маски должен быть упорядочен также, как в примере:
- столбцами
- ширина столбца 10 символов (в двоичном формате
  надо добавить два пробела между столбцами
  для разделения октетов между собой)
Подсказка:
Есть адрес хоста в двоичном формате и маска сети 28. Адрес сети это первые 28 бит
адреса хоста + 4 ноля.
То есть, например, адрес хоста 10.1.1.195/28 в двоичном формате будет
bin_ip = "00001010000000010000000111000011"
А адрес сети будет первых 28 символов из bin_ip + 0000 (4 потому что всего
в адресе может быть 32 бита, а 32 - 28 = 4)
00001010000000010000000111000000
Ограничение: Все задания надо выполнять используя только пройденные темы.
"""

masks = {
    "0": "0.0.0.0",
    "1": "128.0.0.0",
    "2": "192.0.0.0",
    "3": "224.0.0.0",
    "4": "240.0.0.0",
    "5": "248.0.0.0",
    "6": "252.0.0.0",
    "7": "254.0.0.0",
    "8": "255.0.0.0",
    "9": "255.128.0.0",
    "10": "255.192.0.0",
    "11": "255.224.0.0",
    "12": "255.240.0.0",
    "13": "255.248.0.0",
    "14": "255.252.0.0",
    "15": "255.254.0.0",
    "16": "255.255.0.0",
    "17": "255.255.128.0",
    "18": "255.255.192.0",
    "19": "255.255.224.0",
    "20": "255.255.240.0",
    "21": "255.255.248.0",
    "22": "255.255.252.0",
    "23": "255.255.254.0",
    "24": "255.255.255.0",
    "25": "255.255.255.128",
    "26": "255.255.255.192",
    "27": "255.255.255.224",
    "28": "255.255.255.240",
    "29": "255.255.255.248",
    "30": "255.255.255.252",
    "31": "255.255.255.254",
    "32": "255.255.255.255"
}
zero_in_masks = {'31': '0',
                '30': '00',
                '29': '000',
                '28': '0000',
                '27': '00000',
                '26': '000000',
                '25': '0000000',
                '24': '00000000',
                '23': '000000000',
                '22': '0000000000',
                '21': '00000000000',
                '20': '000000000000',
                '19': '0000000000000',
                '18': '00000000000000',
                '17': '000000000000000',
                '16': '0000000000000000',
                '15': '00000000000000000',
                '14': '000000000000000000',
                '13': '0000000000000000000',
                '12': '00000000000000000000',
                '11': '000000000000000000000',
                '10': '0000000000000000000000',
                '9': '00000000000000000000000',
                '8': '000000000000000000000000',
                '7': '0000000000000000000000000',
                '6': '00000000000000000000000000',
                '5': '000000000000000000000000000',
                '4': '0000000000000000000000000000',
                '3': '00000000000000000000000000000',
                '2': '000000000000000000000000000000',
                '1': '0000000000000000000000000000000'
}

ip_and_mask = input("Введите IP-сети: ")
arr = ip_and_mask.split('/')
ip = arr[0]
mask = arr[1]
ip=ip.split('.')
bin_ip = ('{:08b}{:08b}{:08b}{:08b}').format(
    int(ip[0]), int(ip[1]), int(ip[2]), int(ip[3]))
bin_ip = ('').join(bin_ip)
new_mask = zero_in_masks[mask]
bin_ip = bin_ip[:int(mask)] + new_mask
ip = [int(bin_ip[:8], 2), int(bin_ip[8:16], 2), int(
    bin_ip[16:24], 2), int(bin_ip[24:32], 2)]

print("Network:")
print(('{:<8} {:<8} {:<8} {:<8}').format(ip[0], ip[1], ip[2], ip[3]))
print(('{:08b} {:08b} {:08b} {:08b}').format(int(ip[0]), int(ip[1]), int(ip[2]), int(ip[3])))

print("Mask:")
print("/" + mask)
mask = masks[mask]
mask = mask.split('.')
print(('{:8} {:8} {:8} {:8}').format(mask[0], mask[1], mask[2], mask[3]))
print(('{:08b} {:08b} {:08b} {:08b}').format(int(mask[0]), int(mask[1]), int(mask[2]), int(mask[3])))